{"version":3,"sources":["components/Item.js","components/ItemModal.js","FakeServerData.js","App.js","serviceWorker.js","index.js"],"names":["Item","_ref","name","platform","url","onClick","react_default","a","createElement","className","src","alt","emptyState","id","updated","ItemModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","assign","modalItem","updateItem","bind","assertThisInitialized","event","_event$target","target","value","prop","setState","_this2","_this$props","platforms","title","onSave","visible","onHide","document","getElementsByTagName","classList","add","remove","closeModal","inputNodes","getElementById","i","length","aria-label","type","placeholder","onChange","map","key","components_Item","item","newProps","prevState","Component","fakeServerData","items","fakePlatformsData","App","showModal","modalAction","addItem","filterItems","data","setTimeout","serverData","newItems","lastId","reduce","biggest","current","newItem","push","newState","itemPosition","findIndex","currentItem","stringToSearch","selectedPlatform","filteredState","serverItems","filter","toLowerCase","includes","_this3","style","padding","components_ItemModal","action","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c87893b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Item = ({name, platform, url, onClick})=>{\r\n  return (  \r\n    <div onClick={onClick}>\r\n      { url \r\n       ? (\r\n         <div className=\"item\">\r\n            <img src={url} alt={name + \"'s cover\"} />\r\n          </div>\r\n         )\r\n       : (\r\n          <div className=\"item\">\r\n            <div className='item__platform'>{platform}</div>\r\n            <div className='item__name'>\r\n              <p>{name}</p>\r\n            </div> \r\n          </div>   \r\n       )\r\n      }\r\n    </div>  \r\n  )\r\n}\r\n\r\nexport default Item;","import React, { Component } from \"react\";\r\nimport Item from \"./Item\";\r\n\r\nconst emptyState = {\r\n  id:'',\r\n  name:'',\r\n  platform:'PC',\r\n  url:'',\r\n  updated: false\r\n};\r\n\r\nclass ItemModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = Object.assign({},emptyState, props.modalItem);\r\n    this.updateItem = this.updateItem.bind(this);\r\n  }\r\n\r\n  static getDerivedStateFromProps(newProps, prevState) {\r\n    if (prevState.updated === \"true\") return null;\r\n    let newState = Object.assign({}, emptyState, newProps.modalItem);\r\n    return newState;\r\n  }\r\n\r\n  /** Update the state of the component to re-render the item preview. */\r\n  updateItem(event) {\r\n    let { name, value } = event.target;\r\n    let prop = {};\r\n    prop[name] = value;\r\n    prop[\"updated\"] = \"true\";\r\n    this.setState(prop);\r\n  }\r\n\r\n  render() {\r\n    const { id, platforms, title, onSave, visible, onHide } = this.props;\r\n\r\n    // Make the page in the background fixed when the modal is displayed\r\n    if (visible === \"true\") {\r\n      document.getElementsByTagName(\"html\")[0].classList.add(\"is-clipped\");\r\n    }else{\r\n      document.getElementsByTagName(\"html\")[0].classList.remove(\"is-clipped\");\r\n    }\r\n\r\n    /** Empties the fields, the states and calls onHide props. */\r\n    const closeModal = () => {\r\n      // Empty all the input fields to reset the modal\r\n      let inputNodes = document\r\n        .getElementById(id)\r\n        .getElementsByTagName(\"input\");\r\n      for (let i = 0; i < inputNodes.length; i++) {\r\n        inputNodes[i].value = \"\";\r\n      }\r\n      // Reset the state of the component\r\n      this.setState(emptyState);\r\n      // Remove the is-active class to hide the modal\r\n      onHide();\r\n    };\r\n\r\n    /** Generates a new item from the state, sends it back and closes the modal. */\r\n    const saveAndExit = () => {\r\n      let item = Object.assign({}, this.state);\r\n      if (item.name.length === 0) return;\r\n      onSave(item);\r\n      closeModal();\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div\r\n          id={id}\r\n          className={\"modal \" + (visible === \"true\" ? \"is-active\" : \"\")}\r\n        >\r\n          <div onClick={closeModal} className=\"modal-background\" />\r\n          <div className=\"modal-card\">\r\n            <header className=\"modal-card-head\">\r\n              <p className=\"modal-card-title\">{title}</p>\r\n              <button\r\n                onClick={closeModal}\r\n                className=\"delete\"\r\n                aria-label=\"close\"\r\n              />\r\n            </header>\r\n            <section className=\"modal-card-body\">\r\n              <div className=\"columns\">\r\n                <div className=\"column is-two-thirds\">\r\n                  <div className=\"field\">\r\n                    <label className=\"label\">Name</label>\r\n                    <div className=\"control\">\r\n                      <input\r\n                        name=\"name\"\r\n                        className=\"input\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter a name\"\r\n                        onChange={this.updateItem}\r\n                        value={this.state.name}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"field\">\r\n                    <label className=\"label\">Platform</label>\r\n                    <div className=\"control\">\r\n                      <div className=\"select\">\r\n                        <select\r\n                          name=\"platform\"\r\n                          value={this.state.platform}\r\n                          onChange={this.updateItem}\r\n                        >\r\n                        {platforms \r\n                          ? platforms.map(\r\n                            (platform, i) => <option  key={i} value={platform}>{platform}</option>)\r\n                          : ''}\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"field\">\r\n                    <label className=\"label\">Image URL</label>\r\n                    <div className=\"control\">\r\n                      <input\r\n                        className=\"input\"\r\n                        type=\"url\"\r\n                        value={this.state.url}\r\n                        placeholder=\"Enter a URL\"\r\n                        name=\"url\"\r\n                        onChange={this.updateItem}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"column\">\r\n                  <Item\r\n                    name={this.state.name}\r\n                    platform={this.state.platform}\r\n                    url={this.state.url}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </section>\r\n            <footer className=\"modal-card-foot\">\r\n              <button className=\"button is-success\" onClick={saveAndExit}>\r\n                Save\r\n              </button>\r\n              <button className=\"button\" onClick={closeModal}>\r\n                Cancel\r\n              </button>\r\n            </footer>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ItemModal;\r\n","const fakeServerData = {\r\n  'name': 'Joffrey',\r\n  'items':[\r\n    {\r\n      'id':1,\r\n      'name':'Sim City',\r\n      'platform':'PC',\r\n    },\r\n    {\r\n      'id':2,\r\n      'name':'Doom',\r\n      'platform':'Xbox One',\r\n      'url':'https://www.mobygames.com/images/covers/l/330671-doom-xbox-one-front-cover.png',\r\n    },\r\n    {\r\n      'id':3,\r\n      'name':'Super Mario Odyssey',\r\n      'platform':'Switch',\r\n    },\r\n    {\r\n      'id':4,\r\n      'name':'Stardew Valley',\r\n      'platform':'Switch',\r\n      'url':'https://i.ebayimg.com/images/i/292386150442-0-1/s-l1000.jpg',\r\n    },\r\n    {\r\n      'id':5,\r\n      'name':'Stellaris',\r\n      'platform':'PC',\r\n      'url':'https://vignette.wikia.nocookie.net/yogscast/images/e/e7/Stellaris_cover_art.jpg/revision/latest?cb=20160520205240',\r\n    },\r\n  ]\r\n};\r\n\r\nconst fakePlatformsData = ['PC', 'Xbox One', 'Switch'];\r\n\r\nexport {fakeServerData, fakePlatformsData};","import React, { Component } from \"react\";\r\nimport Item from \"./components/Item\";\r\nimport ItemModal from \"./components/ItemModal\";\r\nimport \"./App.css\";\r\nimport \"bulma/css/bulma.css\";\r\n\r\nimport { fakeServerData, fakePlatformsData } from \"./FakeServerData\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showModal: \"false\",\r\n      modalAction: \"add\",\r\n      modalItem: {}\r\n    };\r\n    this.addItem = this.addItem.bind(this);\r\n    this.updateItem = this.updateItem.bind(this);\r\n    this.filterItems = this.filterItems.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Simulation of the call to a remote server returning a value 1 second\r\n    // after the componend did mount.\r\n    let data = Object.assign({}, fakeServerData);\r\n    setTimeout(() => {\r\n      this.setState({\r\n        serverData: Object.assign({}, data),\r\n        data: Object.assign({}, data)\r\n      });\r\n    }, 1000);\r\n    let platforms = Object.assign([], fakePlatformsData);\r\n    setTimeout(() => {\r\n      this.setState({\r\n        platforms\r\n      });\r\n    }, 3000);\r\n  }\r\n\r\n  /** Add an item in the serverData state and trigger filterItems(). */\r\n  addItem(item) {\r\n    let newItems = Object.assign([], this.state.serverData.items);\r\n    // Get the last id in the serverData\r\n    let lastId = newItems.reduce(\r\n      (biggest, current) => (biggest < current.id ? current.id : biggest),\r\n      0\r\n    );\r\n    let newItem = Object.assign({}, item, { id: lastId + 1 });\r\n    newItems.push(newItem);\r\n\r\n    let newState = Object.assign({}, this.state);\r\n    newState.serverData.items = Object.assign([], newItems);\r\n    this.setState(newState);\r\n    this.filterItems();\r\n  }\r\n\r\n  /** Update an item in the serverData state and trigger filterItems(). */\r\n  updateItem(item) {\r\n    // Copie the serverData in a new array.\r\n    let newItems = Object.assign([], this.state.serverData.items);\r\n    // Get the item position in the list and update the item.\r\n    let itemPosition = newItems.findIndex(\r\n      currentItem => currentItem.id === item.id\r\n    );\r\n\r\n    newItems[itemPosition] = item;\r\n    // Assign the new items in the serverData and set the new state.\r\n    let newState = Object.assign({}, this.state);\r\n    newState.serverData.items = Object.assign([], newItems);\r\n    this.setState(newState);\r\n    // Trigger the filter.\r\n    this.filterItems();\r\n  }\r\n\r\n  /** Filter the list of elements displayed on the page. */\r\n  filterItems() {\r\n    // Get the values from the fields\r\n    let stringToSearch = document.getElementById(\"searchItem\").value;\r\n    let selectedPlatform = document.getElementById(\"platformFilter\").value;\r\n\r\n    // Declare a new object and filter it\r\n    let filteredState = Object.assign({}, this.state);\r\n    let serverItems = Object.assign([], filteredState.serverData.items);\r\n    filteredState.data.items = serverItems.filter(\r\n      item =>\r\n        item.name.toLowerCase().includes(stringToSearch.toLowerCase()) &&\r\n        (selectedPlatform.toLowerCase() === \"all platforms\" ||\r\n          item.platform.toLowerCase() === selectedPlatform.toLowerCase())\r\n    );\r\n\r\n    // Set this object as a new state\r\n    this.setState(filteredState);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state && this.state.data ? (\r\n          <div>\r\n            <header className=\"header\">\r\n              <h1 className=\"header__title\">\r\n                {this.state.data.name}\r\n                's library\r\n              </h1>\r\n              <div className=\"header__bar\">\r\n                <span\r\n                  className=\"button is-primary\"\r\n                  onClick={() =>\r\n                    this.setState({\r\n                      showModal: \"true\",\r\n                      modalAction: \"add\",\r\n                      modalItem: {}\r\n                    })\r\n                  }\r\n                >\r\n                  Add a new item\r\n                </span>\r\n                <div className=\"control\" style={{ padding: \"0 10px 0 10px\" }}>\r\n                  <input\r\n                    id=\"searchItem\"\r\n                    className=\"input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Search\"\r\n                    onChange={this.filterItems}\r\n                  />\r\n                </div>\r\n                <div style={{ padding: \"0 10px 0 0px\" }}>\r\n                  <div className=\"control\">\r\n                    <div className=\"select\">\r\n                      <select id=\"platformFilter\" onChange={this.filterItems}>\r\n                        <option>All Platforms</option>\r\n                        {this.state.platforms\r\n                          ? this.state.platforms.map((platform, i) => (\r\n                              <option key={i}>{platform}</option>\r\n                            ))\r\n                          : \"\"}\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <span>{this.state.data.items.length} items</span>\r\n              </div>\r\n            </header>\r\n            <hr />\r\n            <div className=\"item-list\">\r\n              {this.state.data.items\r\n                ? this.state.data.items.map((item, i) => (\r\n                    <Item\r\n                      key={i}\r\n                      id={item.id}\r\n                      name={item.name}\r\n                      platform={item.platform}\r\n                      url={item.url}\r\n                      onClick={() =>\r\n                        this.setState({\r\n                          modalItem: Object.assign({}, item, { key: i }),\r\n                          showModal: \"true\",\r\n                          modalAction: \"edit\"\r\n                        })\r\n                      }\r\n                    />\r\n                  ))\r\n                : \"\"}\r\n            </div>\r\n            <ItemModal\r\n              id=\"addItemModal\"\r\n              action={this.state.modalAction}\r\n              visible={this.state.showModal}\r\n              platforms={this.state.platforms}\r\n              title={\r\n                this.state.modalAction === \"add\"\r\n                  ? \"Add a new item\"\r\n                  : \"Edit an item\"\r\n              }\r\n              modalItem={this.state.modalItem}\r\n              onHide={() =>\r\n                this.setState({\r\n                  modalItem: {},\r\n                  showModal: \"false\"\r\n                })\r\n              }\r\n              onSave={\r\n                this.state.modalAction === \"add\"\r\n                  ? this.addItem\r\n                  : this.updateItem\r\n              }\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div className=\"header\">\r\n            <h1 className=\"header__title\">Loading in progress...</h1>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}