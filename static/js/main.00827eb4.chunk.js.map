{"version":3,"sources":["components/Item.js","components/ItemModal.js","FakeServerData.js","App.js","serviceWorker.js","index.js"],"names":["Item","_ref","name","platform","url","onClick","react_default","a","createElement","className","src","alt","emptyState","updated","ItemModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","assign","modalItem","updateItem","bind","assertThisInitialized","event","_event$target","target","value","prop","setState","_this2","_this$props","id","title","onSave","visible","onHide","closeModal","inputNodes","document","getElementById","getElementsByTagName","i","length","aria-label","type","placeholder","onChange","components_Item","item","newProps","prevState","Component","fakeServerData","items","App","showModal","modalAction","addItem","data","setTimeout","newData","push","console","log","key","_this3","style","padding","e","stringToSearch","newState","filter","toLowerCase","includes","map","components_ItemModal","action","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00827eb4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Item = ({name, platform, url, onClick})=>{\r\n  return (  \r\n    <div onClick={onClick}>\r\n      { url \r\n       ? (\r\n         <div className=\"item\">\r\n            <img src={url} alt={name + \"'s cover\"} />\r\n          </div>\r\n         )\r\n       : (\r\n          <div className=\"item\">\r\n            <div className='item__platform'>{platform}</div>\r\n            <div className='item__name'>\r\n              <p>{name}</p>\r\n            </div> \r\n          </div>   \r\n       )\r\n      }\r\n    </div>  \r\n  )\r\n}\r\n\r\nexport default Item;","import React, { Component } from \"react\";\r\nimport Item from \"./Item\";\r\n\r\nconst emptyState = {\r\n  name:'',\r\n  platform:'PC',\r\n  url:'',\r\n  updated: false\r\n};\r\n\r\nclass ItemModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = Object.assign({},emptyState, props.modalItem);\r\n    this.updateItem = this.updateItem.bind(this);\r\n  }\r\n\r\n  static getDerivedStateFromProps(newProps, prevState) {\r\n    if (prevState.updated === \"true\") return null;\r\n    let newState = Object.assign({}, emptyState, newProps.modalItem);\r\n    return newState;\r\n  }\r\n\r\n  /** Update the state of the component to re-render the item preview. */\r\n  updateItem(event) {\r\n    let { name, value } = event.target;\r\n    let prop = {};\r\n    prop[name] = value;\r\n    prop[\"updated\"] = \"true\";\r\n    this.setState(prop);\r\n  }\r\n\r\n  render() {\r\n    const { id, title, onSave, visible, onHide } = this.props;\r\n\r\n    /** Empties the fields, the states and calls onHide props. */\r\n    const closeModal = () => {\r\n      // Empty all the input fields to reset the modal\r\n      let inputNodes = document\r\n        .getElementById(id)\r\n        .getElementsByTagName(\"input\");\r\n      for (let i = 0; i < inputNodes.length; i++) {\r\n        inputNodes[i].value = \"\";\r\n      }\r\n      // Reset the state of the component\r\n      this.setState(emptyState);\r\n      // Remove the is-active class to hide the modal\r\n      onHide();\r\n    };\r\n\r\n    /** Generates a new item from the state, sends it back and closes the modal. */\r\n    const saveAndExit = () => {\r\n      let item = Object.assign({}, this.state);\r\n      if (item.name.length === 0) return;\r\n      onSave(item);\r\n      closeModal();\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div\r\n          id={id}\r\n          className={\"modal \" + (visible === \"true\" ? \"is-active\" : \"\")}\r\n        >\r\n          <div onClick={closeModal} className=\"modal-background\" />\r\n          <div className=\"modal-card\">\r\n            <header className=\"modal-card-head\">\r\n              <p className=\"modal-card-title\">{title}</p>\r\n              <button\r\n                onClick={closeModal}\r\n                className=\"delete\"\r\n                aria-label=\"close\"\r\n              />\r\n            </header>\r\n            <section className=\"modal-card-body\">\r\n              <div className=\"columns\">\r\n                <div className=\"column is-two-thirds\">\r\n                  <div className=\"field\">\r\n                    <label className=\"label\">Name</label>\r\n                    <div className=\"control\">\r\n                      <input\r\n                        name=\"name\"\r\n                        className=\"input\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter a name\"\r\n                        onChange={this.updateItem}\r\n                        value={this.state.name}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"field\">\r\n                    <label className=\"label\">Platform</label>\r\n                    <div className=\"control\">\r\n                      <div className=\"select\">\r\n                        <select\r\n                          name=\"platform\"\r\n                          value={this.state.platform}\r\n                          onChange={this.updateItem}\r\n                        >\r\n                          <option value=\"PC\">PC</option>\r\n                          <option value=\"Switch\">Switch</option>\r\n                          <option value=\"Xbox One\">Xbox One</option>\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"field\">\r\n                    <label className=\"label\">Image URL</label>\r\n                    <div className=\"control\">\r\n                      <input\r\n                        className=\"input\"\r\n                        type=\"url\"\r\n                        value={this.state.url}\r\n                        placeholder=\"Enter a URL\"\r\n                        name=\"url\"\r\n                        onChange={this.updateItem}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"column\">\r\n                  <Item\r\n                    name={this.state.name}\r\n                    platform={this.state.platform}\r\n                    url={this.state.url}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </section>\r\n            <footer className=\"modal-card-foot\">\r\n              <button className=\"button is-success\" onClick={saveAndExit}>\r\n                Save\r\n              </button>\r\n              <button className=\"button\" onClick={closeModal}>\r\n                Cancel\r\n              </button>\r\n            </footer>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ItemModal;\r\n","const fakeServerData = {\r\n  'name': 'Joffrey',\r\n  'items':[\r\n    {\r\n      'name':'Sim City',\r\n      'platform':'PC',\r\n    },\r\n    {\r\n      'name':'Doom',\r\n      'platform':'Xbox One',\r\n      'url':'https://www.mobygames.com/images/covers/l/330671-doom-xbox-one-front-cover.png',\r\n    },\r\n    {\r\n      'name':'Super Mario Odyssey',\r\n      'platform':'Switch',\r\n    },\r\n    {\r\n      'name':'Stardew Valley',\r\n      'platform':'Switch',\r\n      'url':'https://i.ebayimg.com/images/i/292386150442-0-1/s-l1000.jpg',\r\n    },\r\n    {\r\n      'name':'Stellaris',\r\n      'platform':'PC',\r\n      'url':'https://vignette.wikia.nocookie.net/yogscast/images/e/e7/Stellaris_cover_art.jpg/revision/latest?cb=20160520205240',\r\n    },\r\n  ]\r\n}\r\nexport default fakeServerData;","import React, { Component } from \"react\";\r\nimport Item from \"./components/Item\";\r\nimport ItemModal from \"./components/ItemModal\";\r\nimport \"./App.css\";\r\nimport \"bulma/css/bulma.css\";\r\n\r\nimport fakeServerData from \"./FakeServerData\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      'showModal':'false',\r\n      'modalAction':'add',\r\n      'modalItem':{}\r\n    }\r\n    this.addItem = this.addItem.bind(this);\r\n    this.updateItem = this.updateItem.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Simulation of the call to a remote server returning a value 1 second\r\n    // after the componend did mount.\r\n    let data = Object.assign({}, fakeServerData);\r\n    setTimeout(() => {\r\n      this.setState({\r\n        data\r\n      });\r\n    }, 1000);\r\n  }\r\n\r\n  addItem(item) {\r\n    let newData = Object.assign(this.state.data.items);\r\n    newData.push(item);\r\n    this.setState(newData);\r\n  }\r\n\r\n  updateItem(item) {\r\n    console.log(\"i'm called!\");\r\n    let newData = Object.assign(this.state.data.items)\r\n    newData[item.key] = item;\r\n    // newData.push(item);\r\n    console.log(newData)\r\n    this.setState(newData);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state && this.state.data ? (\r\n          <div>\r\n            <header className=\"header\">\r\n              <h1 className=\"header__title\">\r\n                {this.state.data.name}\r\n                's library\r\n              </h1>\r\n              <div className=\"header__bar\">\r\n                <span \r\n                  className=\"button is-primary\" \r\n                  onClick={()=> this.setState(\r\n                    {\r\n                      'showModal':'true',\r\n                      'modalAction':'add',\r\n                      'modalItem':{}\r\n                    })}>\r\n                  Add a new item\r\n                </span>\r\n                <div className=\"control\" style={{ padding: \"0 10px 0 10px\" }}>\r\n                  <input\r\n                    className=\"input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Search\"\r\n                    onChange={e => {\r\n                      let stringToSearch = e.target.value;\r\n                      let newState = Object.assign({}, this.state);\r\n                      newState.data.items = fakeServerData.items.filter(\r\n                        item => {\r\n                          return item.name\r\n                            .toLowerCase()\r\n                            .includes(stringToSearch);\r\n                        }\r\n                      );\r\n                      this.setState(newState);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <span>{this.state.data.items.length} items</span>\r\n              </div>\r\n            </header>\r\n            <hr />\r\n            <div className=\"item-list\">\r\n              {this.state.data.items\r\n                ? this.state.data.items.map((item, i) => (\r\n                    <Item\r\n                      key={i}\r\n                      name={item.name}\r\n                      platform={item.platform}\r\n                      url={item.url}\r\n                      onClick={()=> this.setState(\r\n                        {\r\n                          'modalItem': Object.assign({}, item, {'key':i}),\r\n                          'showModal':'true',\r\n                          'modalAction':'edit'\r\n                        })}\r\n                      />\r\n                  ))\r\n                : \"\"}\r\n            </div>\r\n            <ItemModal\r\n              id=\"addItemModal\"\r\n              action={this.state.modalAction}\r\n              visible={this.state.showModal}\r\n              title= {this.state.modalAction === 'add' \r\n                ? \"Add a new item\"\r\n                : \"Edit an item\"}\r\n              modalItem={this.state.modalItem}\r\n              onHide={()=> this.setState({'showModal':'false'})}\r\n              onSave={this.state.modalAction === 'add' \r\n                ? this.addItem\r\n                : this.updateItem}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div className=\"header\">\r\n            <h1 className=\"header__title\">Loading in progress...</h1>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}